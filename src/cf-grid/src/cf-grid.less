/* ==========================================================================
   Capital Framework
   Grid mixins
   ========================================================================== */

// Import external dependencies

@import (less) "../../normalize-css/normalize.css";
@import (less) "../../normalize-legacy-addon/normalize-legacy-addon.css";

//
// Less variables
//

@grid_wrapper-width:            1230px;
@grid_gutter-width:             30px;
@grid_total-columns:            12;
@grid_debug:                    false;

//
// Wrapper
//

.grid_wrapper( @grid_wrapper-width: @grid_wrapper-width ) {
  max-width: ( @grid_wrapper-width - @grid_gutter-width );
  padding-right: ( @grid_gutter-width / 2 );
  padding-left: ( @grid_gutter-width / 2 );
  margin: 0 auto;
  clear: both;
}

//
// Columns
//

.grid_column( @columns: 1; @total: @grid_total-columns; @prefix: 0; @suffix: 0 ) {

  display: inline-block;
  box-sizing: border-box;

  // To calculate the percentage width of the base element, we take the number of
  // columns it'll span and divide by the total number of columns. As columns are
  // specified as inline-block elements, standard columns require no further math.
  //
  //                      num cols used
  //  column width in % = -------------
  //                       total cols

  @width: percentage( @columns / @total );

  border: solid transparent;
  border-width: 0 (@grid_gutter-width / 2);

  // Remove whitespace caused by setting display to inline-block
  margin-right: -0.25em;

  vertical-align: top;

  .lt-ie8 & {
    // Hack inline-block into submission
    display: inline;
  }

  // Modifying standard width and padding for prefixed/suffixed columns, if necessary:
  // LESS will now run through four possible child mixins, only one of which will
  // actually be activated, depending on which one's guard conditions are met.
  // At some point, consider how to modularize the prefix-suffix functionality and
  // keep it optional.

  .nonPrefixSuffix( @prefix, @suffix );
  .prefix( @prefix, @suffix );
  .suffix( @suffix, @prefix );
  .prefixSuffix( @prefix, @suffix );

  // Child mixins

  // Run this when neither prefix nor suffix are specified
  .nonPrefixSuffix( @prefix: 0; @suffix: 0 ) when ( @prefix = 0 ) and ( @suffix = 0 ) {
    width: @width;
  }

  // Run this when only prefix is specified
  .prefix( @prefix: 0; @suffix: 0 ) when ( @prefix > 0 ) and ( @suffix = 0 ) {
    @offset: percentage( @prefix / @total );
    width: @width + @offset;
    padding-left: @offset;
    .lt-ie8 & {
      padding-left: 0;
    }
  }

  // Run this when only suffix is specified
  .suffix( @suffix: 0; @prefix: 0 ) when ( @suffix > 0 ) and ( @prefix = 0 ) {
    @offset: percentage( @suffix / @total );
    width: @width + @offset;
    padding-right: @offset;
    .lt-ie8 & {
      padding-right: 0;
    }
  }

  // Run this when both prefix and suffix are specified
  .prefixSuffix( @prefix: 0; @suffix: 0 ) when ( @prefix > 0 ) and ( @suffix > 0 ) {
    @left: percentage( @prefix / @total );
    @right: percentage( @suffix / @total );
    width: @width + @left + @right;
    padding-right: @right;
    padding-left: @left;
    .lt-ie8 & {
      padding-right: 0;
      padding-left: 0;
    }
  }

}

.grid_column( @columns; @total: @grid_total-columns; @prefix: 0; @suffix: 0; ) when ( @grid_debug ) {

  border-left-color: #FFB149;
  border-left-color: fade(#FF9E1B, 25%);
  border-right-color: #FFB149;
  border-right-color: fade(#FF9E1B, 25%);
  background-color: #F6D9D3;
  background-color: fade(#D12124, 20%);

  &:before,
  &:after {
    content: "";
    display: block;
    width: 100%;
    height: @grid_gutter-width * 0.25;
    background-color: #DA6750;
    background-color: fade(#DA6750, 75%);
  }

  &:before {
    margin-bottom: @grid_gutter-width * 0.25;
  }

  &:after {
    margin-top: @grid_gutter-width * 0.25;
  }

}

//
// Push and Pull mixins for source ordering
//

.grid_push( @offset: 1, @grid_total-columns: @grid_total-columns ) {
  @push: percentage( @offset / @grid_total-columns );
  position: relative;
  left: @push;
}

.grid_pull( @offset: 1, @grid_total-columns: @grid_total-columns ) {
  @pull: percentage( @offset / @grid_total-columns );
  position: relative;
  right: @pull;
}

//
// Nested columns
//

.grid_nested-col-group() {
  display: block;
  position: relative;
  margin-left: ( @grid_gutter-width / 2 ) * -1;
  margin-right: ( @grid_gutter-width / 2 ) * -1;
}

//
// EOF
//
